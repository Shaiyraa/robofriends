{"version":3,"sources":["components/header.component.jsx","components/searchbox.component.jsx","components/card.component.jsx","components/card-list.component.jsx","components/scroll.component.jsx","components/error-boundry.component.jsx","redux/types.js","App.js","redux/actions.js","serviceWorkerRegistration.js","reportWebVitals.js","redux/reducers.js","index.js"],"names":["Header","nextProps","nextState","className","React","Component","Searchbox","searchChange","aria-label","type","placeholder","onChange","Card","robot","id","name","email","src","alt","CardList","robots","map","user","i","Scroll","children","style","overflowY","border","height","ErrorBoundry","props","state","hasError","err","info","this","setState","ActionTypes","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILURE","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSetSearchfield","event","text","target","value","payload","onRequestRobots","fetch","then","res","json","catch","useEffect","filteredRobots","filter","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7bd56db0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Header extends React.Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <h1 className=\"f1\">RoboFriends</h1>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Searchbox = ({ searchChange }) => (\r\n  <div className=\"pa2\">\r\n    <input className=\"pa3 ba b--green bg-lightest-blue\" \r\n    aria-label=\"Search robots\"\r\n    type=\"search\" \r\n    placeholder=\"search robots\"\r\n    onChange={searchChange} \r\n    />\r\n  </div>\r\n)\r\n\r\nexport default Searchbox","import React from 'react'\r\n\r\nconst Card = ({ robot:{ id, name, email } }) => (\r\n  <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n    <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\" />\r\n    <div>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './card.component'\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => <Card key={i} robot={robots[i]} />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '600px'}}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll","import React from 'react'\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n  \r\n  componentDidCatch(err, info) {\r\n    this.setState({hasError: true})\r\n  }\r\n\r\n  render() {\r\n    if(this.state.hasError) {\r\n      return <h1>Oops, something went wrong!</h1>\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry","const ActionTypes = {\r\n  CHANGE_SEARCHFIELD: 'CHANGE_SEARCHFIELD',\r\n  REQUEST_ROBOTS_PENDING: 'REQUEST_ROBOTS_PENDING',\r\n  REQUEST_ROBOTS_SUCCESS: 'REQUEST_ROBOTS_SUCCESS',\r\n  REQUEST_ROBOTS_FAILURE: 'REQUEST_ROBOTS_FAILURE'\r\n}\r\n\r\nexport default ActionTypes","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport './App.css'\n\nimport Header from './components/header.component'\nimport Searchbox from './components/searchbox.component'\nimport CardList from './components/card-list.component'\nimport Scroll from './components/scroll.component'\nimport ErrorBoundry from './components/error-boundry.component'\n\nimport { setSearchfield, requestRobots } from './redux/actions'\n\nconst App = ({ onSetSearchfield, onRequestRobots, searchField, robots, isPending }) => {\n\n  useEffect(() => {\n    onRequestRobots()\n  }, [onRequestRobots])\n\n  const filteredRobots = robots.filter(robot =>\n    robot.name.toLowerCase().includes(searchField.toLowerCase()) || robot.email.toLowerCase().includes(searchField.toLowerCase())\n  )\n\n  return (\n    <div className=\"tc\">\n      <Header />\n      <Searchbox searchChange={onSetSearchfield} />\n      <Scroll>\n        { !isPending ? \n          <ErrorBoundry>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundry>   \n          : \n          <h1>Loading...</h1>}\n      </Scroll>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSetSearchfield: event => dispatch(setSearchfield(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n})\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(App)","import ActionTypes from './types'\r\n\r\nexport const setSearchfield = text => ({\r\n  type: ActionTypes.CHANGE_SEARCHFIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({type: ActionTypes.REQUEST_ROBOTS_PENDING})\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res => res.json())\r\n    .then(robots => dispatch({type: ActionTypes.REQUEST_ROBOTS_SUCCESS, payload: robots}))\r\n    .catch(err => dispatch({type: ActionTypes.REQUEST_ROBOTS_FAILURE, payload: err}))\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ActionTypes from './types'\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch(action.type) {\r\n    case ActionTypes.CHANGE_SEARCHFIELD:\r\n      return {\r\n        ...state, \r\n        searchField: action.payload\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n} \r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  err: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type) {\r\n    case ActionTypes.REQUEST_ROBOTS_PENDING:\r\n      return {\r\n        ...state, \r\n        isPending: true\r\n      }\r\n    case ActionTypes.REQUEST_ROBOTS_SUCCESS:\r\n      return {\r\n        ...state, \r\n        robots: action.payload,\r\n        isPending: false\r\n      }\r\n    case ActionTypes.REQUEST_ROBOTS_FAILURE:\r\n      return {\r\n        ...state, \r\n        err: action.payload,\r\n        isPending: false\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n} ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport { logger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport 'tachyons'\n\nimport { searchRobots, requestRobots } from './redux/reducers'\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}