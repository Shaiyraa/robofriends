{"version":3,"sources":["components/header.component.jsx","components/searchbox.component.jsx","components/card.component.jsx","components/card-list.component.jsx","components/scroll.component.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Header","className","Searchbox","searchChange","type","placeholder","onChange","Card","robot","id","name","email","src","alt","CardList","robots","map","user","i","Scroll","children","style","overflowY","border","height","App","useState","setRobots","searchfield","setSearchfield","useEffect","fetch","then","res","json","users","catch","filteredRobots","filter","toLowerCase","includes","e","target","value","length","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"sNAMeA,G,MAJA,kBACb,oBAAIC,UAAU,KAAd,2BCSaC,EAVG,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OAChB,qBAAKF,UAAU,MAAf,SACE,uBAAOA,UAAU,mCACjBG,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCKCI,EAVF,SAAC,GAAD,QAAGC,MAAQC,EAAX,EAAWA,GAAIC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,MAArB,OACX,sBAAKV,UAAU,mDAAf,UACE,qBAAKW,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,UACpD,gCACE,6BAAKH,IACL,4BAAIC,WCIKG,EARE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,8BACGA,EAAOC,KAAI,SAACC,EAAMC,GAAP,OAAa,cAAC,EAAD,CAAcV,MAAOO,EAAOG,IAAjBA,SCI3BC,EARA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGJ,KCmCQK,EA9BH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTX,EADS,KACDY,EADC,OAEsBD,mBAAS,IAF/B,mBAETE,EAFS,KAEIC,EAFJ,KAIhBC,qBAAU,WACRC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAIR,EAAUQ,MACxBC,UACA,IAEH,IAIMC,EAAiBtB,EAAOuB,QAAO,SAAA9B,GAAK,OACxCA,EAAME,KAAK6B,cAAcC,SAASZ,EAAYW,gBAAkB/B,EAAMG,MAAM4B,cAAcC,SAASZ,EAAYW,kBAGjH,OACE,sBAAKtC,UAAU,KAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWE,aAXQ,SAACsC,GACtBZ,EAAeY,EAAEC,OAAOC,UAWtB,cAAC,EAAD,UACI5B,EAAO6B,OAAS,cAAC,EAAD,CAAU7B,OAAQsB,IAAoB,kDCtB5CQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAACkC,GACLA,EAAaC,gBAEd/B,OAAM,SAACgC,GACNC,QAAQD,MAAMA,EAAME,YE9G5BpB,M","file":"static/js/main.f5038ac7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => (\r\n  <h1 className=\"f1\">RoboFriends</h1>\r\n)\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Searchbox = ({ searchChange }) => (\r\n  <div className=\"pa2\">\r\n    <input className=\"pa3 ba b--green bg-lightest-blue\" \r\n    type=\"search\" \r\n    placeholder=\"search robots\"\r\n    onChange={searchChange} \r\n    />\r\n  </div>\r\n)\r\n\r\nexport default Searchbox","import React from 'react'\r\n\r\nconst Card = ({ robot:{ id, name, email } }) => (\r\n  <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n    <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\r\n    <div>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './card.component'\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => <Card key={i} robot={robots[i]} />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '600px'}}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll","import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nimport Header from './components/header.component'\nimport Searchbox from './components/searchbox.component'\nimport CardList from './components/card-list.component'\nimport Scroll from './components/scroll.component'\n\n//import { robotsArr } from './robots'\n\nconst App = () => {\n  const [robots, setRobots] = useState([])\n  const [searchfield, setSearchfield] = useState('')\n  \n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => setRobots(users))\n    .catch()\n  }, [])\n\n  const onSearchChange = (e) => {\n    setSearchfield(e.target.value)\n  }\n\n  const filteredRobots = robots.filter(robot =>\n    robot.name.toLowerCase().includes(searchfield.toLowerCase()) || robot.email.toLowerCase().includes(searchfield.toLowerCase())\n  )\n\n  return (\n    <div className=\"tc\">\n      <Header />\n      <Searchbox searchChange={onSearchChange} />\n      <Scroll>\n        { robots.length ? <CardList robots={filteredRobots}/> : <h1>Loading...</h1>}\n      </Scroll>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}